import tkinter as tk
from tkinter import messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class BMIApp:
    def __init__(self, master):
        self.master = master
        self.master.title("BMI Calculator")

        # Variables for user input
        self.weight_var = tk.DoubleVar()
        self.height_var = tk.DoubleVar()

        # GUI components
        tk.Label(master, text="Weight (kg):").grid(row=0, column=0, padx=10, pady=10)
        tk.Entry(master, textvariable=self.weight_var).grid(row=0, column=1, padx=10, pady=10)

        tk.Label(master, text="Height (m):").grid(row=1, column=0, padx=10, pady=10)
        tk.Entry(master, textvariable=self.height_var).grid(row=1, column=1, padx=10, pady=10)

        tk.Button(master, text="Calculate BMI", command=self.calculate_bmi).grid(row=2, column=0, columnspan=2, pady=10)

        # BMI Result
        self.bmi_label = tk.Label(master, text="BMI:")
        self.bmi_label.grid(row=3, column=0, columnspan=2)

        # User data storage
        self.user_data = []

    def calculate_bmi(self):
        try:
            weight = self.weight_var.get()
            height = self.height_var.get()

            if not (10 < weight < 500) or not (0.5 < height < 3):
                raise ValueError("Invalid input. Please enter valid weight and height.")

            bmi = weight / (height ** 2)
            self.bmi_label.config(text=f"BMI: {bmi:.2f}")

            # Categorize BMI
            category = self.categorize_bmi(bmi)
            messagebox.showinfo("BMI Category", f"Your BMI category is {category}")

            # Save user data
            self.user_data.append((weight, height, bmi))

            # Visualize data
            self.visualize_data()

        except ValueError as e:
            messagebox.showerror("Error", str(e))

    def categorize_bmi(self, bmi):
        if bmi < 18.5:
            return "Underweight"
        elif 18.5 <= bmi < 24.9:
            return "Normal weight"
        elif 25 <= bmi < 29.9:
            return "Overweight"
        else:
            return "Obese"

    def visualize_data(self):
        if len(self.user_data) > 1:
            weights = [data[0] for data in self.user_data]
            heights = [data[1] for data in self.user_data]
            bmis = [data[2] for data in self.user_data]

            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
            ax1.plot(weights, label='Weight (kg)', marker='o')
            ax1.set_xlabel('Measurements')
            ax1.set_ylabel('Weight (kg)')
            ax1.legend()

            ax2.plot(bmis, label='BMI', marker='o', color='r')
            ax2.set_xlabel('Measurements')
            ax2.set_ylabel('BMI')
            ax2.legend()

            canvas = FigureCanvasTkAgg(fig, master=self.master)
            canvas_widget = canvas.get_tk_widget()
            canvas_widget.grid(row=4, column=0, columnspan=2, pady=10)

            canvas.draw()

# Main program
if __name__ == "__main__":
    root = tk.Tk()
    app = BMIApp(root)
    root.mainloop()

